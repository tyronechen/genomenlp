[project]
# This is the name of your project. The first time you publish this
# package, this name will be registered for you. It will determine how
# users can install this project, e.g.:
#
# $ pip install genomenlp
#
# And where it will live on PyPI: https://pypi.org/project/sampleproject/
#
# There are some restrictions on what makes a valid project name
# specification here:
# https://packaging.python.org/specifications/core-metadata/#name
name = "genomenlp"  # Required

# Versions should comply with PEP 440:
# https://www.python.org/dev/peps/pep-0440/
#
# For a discussion on single-sourcing the version, see
# https://packaging.python.org/guides/single-sourcing-package-version/
version = "2.8.7"  # Required

# This is a one-line description or tagline of what your project does. This
# corresponds to the "Summary" metadata field:
# https://packaging.python.org/specifications/core-metadata/#summary
description = "A high level framework for applying conventional machine learning and deep learning directly to biological sequence data. Remember to add the conda-forge channel during install."  # Optional

# This is an optional longer description of your project that represents
# the body of text which users will see when they visit PyPI.
#
# Often, this is the same as your README, so you can just read it in from
# that file directly (as we have already done above)
#
# This field corresponds to the "Description" metadata field:
# https://packaging.python.org/specifications/core-metadata/#description-optional
readme = "README.md" # Optional

# Specify which Python versions you support. In contrast to the
# 'Programming Language' classifiers above, 'pip install' will check this
# and refuse to install the project if the version does not match. See
# https://packaging.python.org/guides/distributing-packages-using-setuptools/#python-requires
requires-python = ">=3.9"

# This is either text indicating the license for the distribution, or a file
# that contains the license
# https://packaging.python.org/en/latest/specifications/core-metadata/#license
license = {file = "LICENSE"}

# This field adds keywords for your project which will appear on the
# project page. What does your project relate to?
#
# Note that this is a list of additional keywords, separated
# by commas, to be used to assist searching for the distribution in a
# larger catalog.
keywords = ["genome", "genomic", "genomics", "transcript", "transcriptome", "transcriptomics", "protein", "proteomic", "proteomics", "machine learning", "deep learning", "pipeline", "biological sequence", "biological sequence data"]  # Optional

# This should be your name or the name of the organization who originally
# authored the project, and a valid email address corresponding to the name
# listed.
authors = [
  {name = "Tyrone Chen", email = "tyrone.chen@monash.edu"} # Optional
]

# This should be your name or the names of the organization who currently
# maintains the project, and a valid email address corresponding to the name
# listed.
maintainers = [
  {name = "Tyrone Chen", email = "tyrone.chen@monash.edu" } # Optional
]

# Classifiers help users find your project by categorizing it.
#
# For a list of valid classifiers, see https://pypi.org/classifiers/
classifiers = [  # Optional
  # How mature is this project? Common values are
  #   3 - Alpha
  #   4 - Beta
  #   5 - Production/Stable
  "Development Status :: 4 - Beta",

  # Indicate who your project is intended for
  "Intended Audience :: Developers :: Users :: Bioinformaticians :: Computational Biologists :: Biologists",
  "Topic :: Pipeline :: Bioinformatics :: Biology :: Computational Biology",

  # Pick your license as you wish
  "License :: OSI Approved :: MIT License",

  # Specify the Python versions you support here. In particular, ensure
  # that you indicate you support Python 3. These classifiers are *not*
  # checked by "pip install". See instead "python_requires" below.
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3 :: Only",
]

# This field lists other packages that your project depends on to run.
# Any package you put here will be installed by pip when your project is
# installed, so they must be valid existing projects.
#
# For an analysis of this field vs pip's requirements files see:
# https://packaging.python.org/discussions/install-requires-vs-requirements/
dependencies = [ # Optional
  "datasets==2.10.1",
  "gensim==4.2.0",
  "hyperopt==0.2.7",
  "libarchive==3.6.2",
  "matplotlib==3.5.2",
  "pandas==1.4.2",
  "pytorch==1.10.0",
  "ray==1.13.0",
  "scikit-learn==1.1.1",
  "scipy==1.10.1",
  "screed==1.0.5",
  "seaborn==0.11.2",
  "sentencepiece==0.1.96",
  "tabulate==0.9.0",
  "tokenizers==0.12.1",
  "tqdm==4.64.0",
  "transformers==4.23.0",
  "transformers-interpret==0.8.1",
  "wandb==0.13.4",
  "weightwatcher==0.6.4",
  "xgboost==1.7.1",
  "yellowbrick==1.3.post1",
]

# List additional groups of dependencies here (e.g. development
# dependencies). Users will be able to install these using the "extras"
# syntax, for example:
#
#   $ pip install sampleproject[dev]
#
# Similar to `dependencies` above, these must be valid existing
# projects.
# [project.optional-dependencies] # Optional
# dev = ["check-manifest"]
# test = ["coverage"]

# List URLs that are relevant to your project
#
# This field corresponds to the "Project-URL" and "Home-Page" metadata fields:
# https://packaging.python.org/specifications/core-metadata/#project-url-multiple-use
# https://packaging.python.org/specifications/core-metadata/#home-page-optional
#
# Examples listed include a pattern for specifying where the package tracks
# issues, where the source is hosted, where to say thanks to the package
# maintainers, and where to support the project financially. The key is
# what's used to render the link text on PyPI.
[project.urls]  # Optional
"Homepage" = "https://github.com/tyronechen/genomenlp"
"Bug Reports" = "https://github.com/tyronechen/genomenlp/issues"
# "Funding" = "https://donate.pypi.org"
# "Say Thanks!" = "http://saythanks.io/to/example"
"Source" = "https://github.com/tyronechen/genomenlp"

# The following would provide a command line executable called `sample`
# which executes the function `main` from this package when invoked.
[project.scripts]  # Optional
compare_empirical_tokens = "genomenlp.create_empirical_tokens:main"
create_dataset_bio = "genomenlp.create_dataset_bio:main"
create_dataset_nlp = "genomenlp.create_dataset_nlp:main"
create_embedding_bio_sp = "genomenlp.create_embedding_bio_sp:main"
create_embedding_bio_kmers = "genomenlp.create_embedding_bio_kmers:main"
cross_validate = "genomenlp.cross_validate:main"
embedding_pipeline = "genomenlp.embedding_pipeline:main"
fit_powerlaw = "genomenlp.fit_powerlaw:main"
freq_pipeline = "genomenlp.freq_pipeline:main"
generate_synthetic = "genomenlp.generate_synthetic:main"
interpret = "genomenlp.interpret:main"
kmerise_bio = "genomenlp.kmerise_bio:main"
parse_sp_tokens = "genomenlp.parse_sp_tokens:main"
summarise_metrics = "genomenlp.summarise_metrics:main"
sweep = "genomenlp.sweep:main"
tokenise_bio = "genomenlp.tokenise_bio:main"
train = "genomenlp.train:main"

# This is configuration specific to the `setuptools` build backend.
# If you are using a different build backend, you will need to change this.
[tool.setuptools]
# If there are data files included in your packages that need to be
# installed, specify them here.
# package-data = {"sample" = ["*.dat"]}
# packages = ["genomenlp"]
# package-dir = {"" = "src"}

[tool.setuptools.packages.find]
# All the following settings are optional:
where = ["src"]  # ["."] by default
include = ["genomenlp"]  # ["*"] by default

[build-system]
# These are the assumed default build requirements from pip:
# https://pip.pypa.io/en/stable/reference/pip/#pep-517-and-518-support
requires = ["setuptools>=43.0.0", "wheel"]
build-backend = "setuptools.build_meta"
